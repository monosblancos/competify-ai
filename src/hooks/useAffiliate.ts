import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { Affiliate, AffiliateReferral, AffiliateStats } from '@/types/affiliate';
import { toast } from '@/hooks/use-toast';

interface SupabaseUser {
  id: string;
  email?: string;
}

export const useAffiliate = () => {
  const { user } = useAuth();
  const [affiliate, setAffiliate] = useState<Affiliate | null>(null);
  const [referrals, setReferrals] = useState<AffiliateReferral[]>([]);
  const [stats, setStats] = useState<AffiliateStats>({
    totalEarnings: 0,
    pendingEarnings: 0,
    totalReferrals: 0,
    conversionRate: 0,
    clicksThisMonth: 0,
    earningsThisMonth: 0,
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user) {
      fetchAffiliateData();
    }
  }, [user]);

  const fetchAffiliateData = async () => {
    try {
      setLoading(true);

      // Fetch affiliate profile
      const { data: affiliateData, error: affiliateError } = await supabase
        .from('affiliates')
        .select('*')
        .eq('user_id', (user as any)?.id)
        .single();

      if (affiliateError && affiliateError.code !== 'PGRST116') {
        console.error('Error fetching affiliate:', affiliateError);
        return;
      }

      if (affiliateData) {
        setAffiliate({
          ...affiliateData,
          status: affiliateData.status as 'pending' | 'active' | 'suspended'
        });

        // Fetch referrals
        const { data: referralsData, error: referralsError } = await supabase
          .from('affiliate_referrals')
          .select('*')
          .eq('affiliate_id', affiliateData.id)
          .order('created_at', { ascending: false });

        if (referralsError) {
          console.error('Error fetching referrals:', referralsError);
        } else {
          setReferrals(
            (referralsData || []).map(ref => ({
              ...ref,
              status: ref.status as 'pending' | 'confirmed' | 'paid' | 'cancelled'
            }))
          );
        }

        // Calculate stats
        const totalEarnings = affiliateData.total_earnings_cents / 100;
        const pendingEarnings = referralsData
          ?.filter(r => r.status === 'pending')
          .reduce((sum, r) => sum + r.commission_cents, 0) / 100 || 0;

        const thisMonth = new Date();
        thisMonth.setMonth(thisMonth.getMonth());
        const earningsThisMonth = referralsData
          ?.filter(r => {
            const refDate = new Date(r.created_at);
            return refDate.getMonth() === thisMonth.getMonth() && 
                   refDate.getFullYear() === thisMonth.getFullYear();
          })
          .reduce((sum, r) => sum + r.commission_cents, 0) / 100 || 0;

        setStats({
          totalEarnings,
          pendingEarnings,
          totalReferrals: affiliateData.total_referrals,
          conversionRate: referralsData?.length > 0 ? 
            (referralsData.filter(r => r.order_id).length / referralsData.length) * 100 : 0,
          clicksThisMonth: 0, // This would need tracking
          earningsThisMonth,
        });
      }
    } catch (error) {
      console.error('Error in fetchAffiliateData:', error);
    } finally {
      setLoading(false);
    }
  };

  const joinAffiliateProgram = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from('affiliates')
        .insert([
          {
            user_id: (user as any).id,
            affiliate_code: '', // Will be generated by trigger
            status: 'pending',
          }
        ])
        .select()
        .single();

      if (error) {
        console.error('Error joining affiliate program:', error);
        toast({
          title: "Error",
          description: "No se pudo unir al programa de afiliados",
          variant: "destructive",
        });
      } else {
        setAffiliate({
          ...data,
          status: data.status as 'pending' | 'active' | 'suspended'
        });
        toast({
          title: "¡Bienvenido!",
          description: "Te has unido al programa de afiliados. Tu solicitud está pendiente de aprobación.",
        });
      }
    } catch (error) {
      console.error('Error in joinAffiliateProgram:', error);
      toast({
        title: "Error",
        description: "Ocurrió un error inesperado",
        variant: "destructive",
      });
    }
  };

  const generateReferralLink = (productId?: string) => {
    if (!affiliate?.affiliate_code) return '';
    
    const baseUrl = window.location.origin;
    const path = productId ? `/recursos/${productId}` : '/';
    return `${baseUrl}${path}?ref=${affiliate.affiliate_code}`;
  };

  return {
    affiliate,
    referrals,
    stats,
    loading,
    joinAffiliateProgram,
    generateReferralLink,
    refreshData: fetchAffiliateData,
  };
};